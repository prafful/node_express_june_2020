No SQL Database -> MongoDB -> JSON

SQL -> RDBMS -> Relational (MySQL, SQL server, Oracle)


SQL Databases
1. Databases
2. Table
3. Rows
4. Columns
5. Join Table
6. Primary Key and Foreign Key

NoSQL Databases
1. Databases
2. Collections
3. Documents
4. Fields
5. Embedded Documents
6. Primary Key -> automatically generated!


create new mongdb dataabase
>>use friend
will create friend dataabase
>>db
will tell the name of active database
>> db.createCollection("personal")
will create new collection named > personal
> show collections
will list all the collections in active db
> db.hobby.insert({"name":"swimming", "level":"amateur", "pursuingsince":4})
will create new collection named > hobby and insert a new document in hobby collection,
both a same time!
> db.hobby.insert({"name":"cooking", "level":"amateur", "pursuingsince":20})
> db.hobby.insert({"name":"programming", "level":"expert", "pursuingsince":13})
> db.hobby.insert({"name":"driving", "level":"expert", "pursuingsince":8})
> db.hobby.insert({"name":"hacking", "level":"novice", "pursuingsince":10})
will insert 4 documents more
> db.hobby.find()
will list all documents in hobby collection
> db.hobby.find().pretty()
will prettify the output of above command
> db.hobby.find().pretty().limit(2)
will limit the count of documents in output by 2
> db.hobby.find().sort({name:-1})
will sort document in descending order for name field
> db.hobby.find().sort({name:1})
will sort document in ascending order for name field
> db.hobby.find().sort({pursuingsince:1})
will sort document in ascending order for pursuingsince field
> db.hobby.count()
will return the count of documents in the hobby collection!
> db.hobby.find({name:"cooking"})
will return document/s with name field to be equal to cooking
> db.hobby.find({level:"expert"})
will return document/s with level field to be equal to expert
> db.hobby.find({}, {name:1})
will return only name field with primary key 
> db.hobby.find({}, {level:1, pursuingsince:1, _id:0})
db.hobby.update({'_id':'5ee701c8d32e072d76f9b804'}, {$set:{"level":"amateur"}})
db.hobby.update({"name" : "hacking"}, {$set:{"level":"amateur"}})
db.hobby.find().pretty()
db.hobby.update({"name" : "hacking"}, {$set:{"level":"zero"}}, {multi:true})
db.hobby.find().pretty()
db.hobby.update({'_id':'5ee701c8d32e072d76f9b804'}, {$set:{"level":"amateur"}})
db.hobby.find().pretty()
db.hobby.update({'_id':ObjectId('5ee701c8d32e072d76f9b804')}, {$set:{"level":"amateur"}})
db.hobby.find().pretty()
db.hobby.find()
db.hobby.remove({ "_id" : ObjectId("5ee70777d32e072d76f9b808")})
db.hobby.find()
show collections
db.personal.find()
db.personal.drop()
show collections
use location
db.createCollection("city")
show collections
db
db.dropDatabase()
show dbs
db
use friendlyEqual(
use friend
db.friend.find()
db.hobby.find()
db.hobby.find().pretty()
db.hobby.find({pursuingsince:{$gt:8}})
db.hobby.find({pursuingsince:{$gte:8}})
db.hobby.find({pursuingsince:{$lte:8}})
db.hobby.find({pursuingsince:{$lt:8}})
db.hobby.find().pretty()
db.hobby.find({pursuingsince:{$gte:8, $lt:13}})
db.hobby.find().pretty()
db.hobby.find({$and:[{pursuingsince:{$gte:10}}, {level:'amateur'}]})
db.hobby.find({$and:[{pursuingsince:{$gte:10}}, {level:'amateur'}]}).pretty()
db.hobby.find({$and:[{pursuingsince:{$gt:10}}, {level:'amateur'}]}).pretty()
db.hobby.find({$or:[{pursuingsince:{$gt:10}}, {level:'amateur'}]}).pretty()
db.hobby.update({}, {$set:{experience:10}},{upsert:false, multi:true})
db.hobby.find().pretty()
db.hobby.find({$where: function(){}}).pretty()
db.hobby.find({$where: function(){return (this.pursuingsince == this.experience)}}).pretty()
db.hobby.find({$where: function(){return (this.pursuingsince != this.experience)}}).pretty()
db.hobby.find({$where: function(){return (this.pursuingsince >= this.experience)}}).pretty()
db.hobby.find({$where: function(){return (this.pursuingsince < this.experience)}}).pretty()
will return only level and pursuingsince filed without primarykey













